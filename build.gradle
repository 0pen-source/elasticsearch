allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
}

if (hasProperty('projectsPrefix') == false) {
  allprojects {
    project.ext['projectsPrefix'] = ''
  }  
}

allprojects {
  // injecting groovy property variables into all projects
  project.ext {
    // minimum java 8
    sourceCompatibility = '1.8'
    targetCompatibility = sourceCompatibility

    luceneSnapshotRevision = '1702855'
    // dependency versions that are used in more than one place
    versions = [
      lucene:             "5.4.0-snapshot-${luceneSnapshotRevision}",
      randomizedrunner:   "2.1.17",
      httpclient:         '4.3.6'
    ]
  }
}

subprojects {
  repositories {
    mavenCentral()
    maven {
      name 'sonatype-snapshots'
      url 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
      name 'lucene-snapshots'
      url "http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/${luceneSnapshotRevision}"
    }
  }

  gradle.projectsEvaluated {
    // include license and notice in jars
    tasks.withType(Jar) {
      into('META-INF') {
        from project.rootProject.rootDir
        include 'LICENSE.txt'   
        include 'NOTICE.txt'   
      }
    }
  }

  /*
  configurations {
    all {
      resolutionStrategy {
        //failOnVersionConflict()

        dependencySubstitution {
          substitute module("org.elasticsearch:rest-api-spec:${version}") with project("${projectsPrefix}:rest-api-spec")
          substitute module("org.elasticsearch:elasticsearch:${version}") with project("${projectsPrefix}:core")
          substitute module("org.elasticsearch:test-framework:${version}") with project("${projectsPrefix}:test-framework")
          substitute module("org.elasticsearch.distributions.zip:elasticsearch:${version}") with project("${projectsPrefix}:distribution")
        }
      }
    }
  }
  */

  // define a nice artifacts task to list all artifacts of a project
  task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
      configurations.findAll().each { config ->
        println "${config}:"
        config.allArtifacts.getFiles().each { file -> println "" + file}
        println ' '
      }
    }
  }
}

/*idea {
  project {
    languageLevel = sourceCompatibility
    vcs = 'Git'
  }
}
*/

