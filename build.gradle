allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  // injecting groovy property variables into all projects
  project.ext {
    // minimum java 8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    luceneSnapshotRevision = '1702855'
    randomizedRunnerSnapshotRevision = 'pr202'
    // dependency versions that are used in more than one place
    versions = [
      lucene:             "5.4.0-snapshot-${luceneSnapshotRevision}",
      randomizedrunner:   "2.2.0-snapshot-${randomizedRunnerSnapshotRevision}"
    ]
  }

  repositories {
    mavenCentral()
    // Sonatype Snapshots (Elasticsearch)
    maven {
      name 'sonatype-snapshots'
      url 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
      name 'lucene-snapshots'
      url "http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/${luceneSnapshotRevision}"
    }
    maven {
      name 'randomizedrunner-snapshots'
      url "http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/rr-${randomizedRunnerSnapshotRevision}"
    }
  }
}

subprojects {
  // fail on all javac warnings
  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Werror" << "-Xlint:all" 
    }
  }

  configurations {
    all {
      resolutionStrategy {
        //failOnVersionConflict()

        dependencySubstitution {
          substitute module('org.elasticsearch:elasticsearch') with project(':core')
          substitute module('org.elasticsearch:test-framework') with project(':test-framework')
          substitute module('org.elasticsearch:rest-api-spec') with project(':rest-api-spec')
          substitute module('org.elasticsearch.distributions.zip:elasticsearch') with project(':distribution')
        }
      }
    }
  }

  // define a nice artifacts task to list all artifacts of a project
  task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
      configurations.findAll().each { config ->
        println "${config}:"
        config.allArtifacts.getFiles().each { file -> println "" + file}
        println ' '
      }
    }
  }
}

idea {
  project {
    languageLevel = sourceCompatibility
    vcs = 'Git'
  }
}

