rootProject.name = 'elasticsearch'

String[] projects = [
  'rest-api-spec',
  'core',
  'distribution',
  'test-framework',
  'plugins:analysis-icu',
  'plugins:analysis-kuromoji',
  'plugins:analysis-phonetic',
  'plugins:analysis-smartcn',
  'plugins:analysis-stempel',
  'plugins:cloud-gce',
  'plugins:delete-by-query',
  'plugins:discovery-azure',
  'plugins:discovery-ec2',
  'plugins:discovery-multicast',
  'plugins:lang-javascript',
  'plugins:lang-python',
  'plugins:mapper-murmur3',
  'plugins:mapper-size',
  'plugins:repository-azure',
  'plugins:repository-s3',
  'plugins:jvm-example',
  'plugins:site-example',
  'qa:smoke-test-client',
  'qa:smoke-test-plugins'
]

if (hasProperty('elasticsearch.projectsPrefix')) {
  String prefix = getProperty('elasticsearch.projectsPrefix')
  projects = projects.collect { "${prefix}:${it}" }
}

include projects

/*
String extraProjectPrefix = 'elasticsearch.extra.'
// add extra projects, eg so external plugins can hook in with a local elasticsearch checkout
for (Map.Entry<String, ?> property : getProperties()) {
  if (property.getKey().startsWith(extraProjectPrefix)) {
    String name = property.getKey().replaceFirst(extraProjectPrefix, '')
    String location = property.getValue()
    if (location.isEmpty()) {
      throw new InvalidUserDataException("Must specify a non-empty location for property '${property.getKey()}'")
    }
    File path = file(location)
    if (path.exists() == false || path.isDirectory() == false) {
      throw new InvalidUserDataException("Must specify a valid directory for property '${property.getKey()}'")
    } 
    logger.info("Adding extra project: ${name} at ${location}")

    File settings = new File(path, 'settings.gradle')
    if (settings.exists()) {
      //ext.projectsPrefix = name
      apply from: settings 
    } else {
      include name
      project(":${name}").projectDir = path
    }
  }
}
*/

// set the project name at the end because including extra projects may have reset it
