import com.carrotsearch.gradle.randomizedtesting.RandomizedTestingTask
import org.elasticsearch.gradle.BuildPlugin

plugins {
  id 'nebula.optional-base' version '3.0.2'
  id 'nebula.source-jar' version '4.2.1'
  id 'nebula.maven-publish' version '4.2.1'
}
apply plugin: 'elasticsearch.build'

tasks.withType(Jar) {
  baseName = 'elasticsearch'
}

configurations {
  restSpec2 // the rest spec is copied independently to the test classes dir
}

versions << [
  jackson:  '2.6.2',
  log4j:    '1.2.17',
  slf4j:    '1.6.2'
]

dependencies {

  // lucene
  compile "org.apache.lucene:lucene-core:${versions.lucene}"
  compile "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
  compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}"
  compile "org.apache.lucene:lucene-queries:${versions.lucene}"
  compile "org.apache.lucene:lucene-memory:${versions.lucene}"
  compile "org.apache.lucene:lucene-highlighter:${versions.lucene}"
  compile "org.apache.lucene:lucene-queryparser:${versions.lucene}"
  compile "org.apache.lucene:lucene-suggest:${versions.lucene}"
  compile "org.apache.lucene:lucene-join:${versions.lucene}"
  compile "org.apache.lucene:lucene-spatial:${versions.lucene}"

  // TODO: explain these
  compile 'com.google.guava:guava:18.0'
  compile 'commons-cli:commons-cli:1.3.1'
  compile 'com.carrotsearch:hppc:0.7.1'

  // time handling, remove with java 8 time
  compile 'joda-time:joda-time:2.8.2'
  // joda 2.0 moved to using volatile fields for datetime
  // When updating to a new version, make sure to update our copy of BaseDateTime
  compile 'org.joda:joda-convert:1.2'

  // json and yaml
  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}"
  compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson) {
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
  }
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
  // network stack
  compile 'io.netty:netty:3.10.3.Final'
  // compression of transport protocol
  compile 'com.ning:compress-lzf:1.0.2'
  // percentiles aggregation
  compile 'com.tdunning:t-digest:3.0'
  // precentil ranks aggregation
  compile 'org.hdrhistogram:HdrHistogram:2.1.6'

  // lucene spatial
  compile 'com.spatial4j:spatial4j:0.4.1', optional
  compile 'com.vividsolutions:jts:1.13', optional

  // templating
  compile('com.github.spullara.mustache.java:compiler:0.8.13') { dep ->
    dep.transitive = false
    optional(dep)
  }

  // logging
  compile "log4j:log4j:${versions.log4j}", optional
  compile "log4j:apache-log4j-extras:${versions.log4j}", optional
  compile "org.slf4j:slf4j-api:${versions.slf4j}", optional

  // TODO: why are we using jna
  compile 'net.java.dev.jna:jna:4.1.0', optional

  // TODO: remove these test deps and just dpeend on test-framework
  testCompile(group: 'junit', name: 'junit', version: '4.11') {
    transitive = false
  }
  testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"

  testCompile("org.apache.lucene:lucene-test-framework:${versions.lucene}") {
    exclude group: 'com.carrotsearch.randomizedtesting', module: 'junit4-ant'
  }
  testCompile(group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3') {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
  testCompile 'com.google.jimfs:jimfs:1.0'
  testCompile "org.apache.httpcomponents:httpclient:${versions.httpclient}"

  restSpec2 "org.elasticsearch:rest-api-spec:${version}" //project("${projectsPrefix}:rest-api-spec") // for rest tests
}

compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked"
compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked"

forbiddenPatterns {
  exclude '**/*.json'
  exclude '**/*.jmx'
  exclude '**/org/elasticsearch/cluster/routing/shard_routes.txt'
}

task copyRestSpec(type: Copy, dependsOn: configurations.restSpec2) {
  from { zipTree(configurations.restSpec2.singleFile) }
  into sourceSets.test.output.resourcesDir
}
// TODO: remove this once test-the-tester rest tests are moved out of core
test.dependsOn copyRestSpec

task integTest(type: RandomizedTestingTask,
               group: JavaBasePlugin.VERIFICATION_GROUP,
               description: 'Multi-node tests') {
  configure(BuildPlugin.commonTestConfig(project))
  dependsOn = project.test.dependsOn
  classpath = project.test.classpath
  testClassesDir = project.test.testClassesDir
  include '**/*IT.class'
}

idea {
  module {
    //scopes.COMPILE.plus.add(configurations.optional)
    scopes.TEST.plus.add(configurations.restSpec2)
  }
}
